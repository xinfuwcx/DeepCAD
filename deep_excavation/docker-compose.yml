version: '3.8'

services:
  # API网关
  api-gateway:
    image: nginx:alpine
    ports:
      - "8000:80"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - consul
      - geometry-service
      - mesh-service
      - analysis-service
      - result-service
      - project-service
    networks:
      - phoenix-network

  # 服务发现
  consul:
    image: consul:1.14
    container_name: consul
    ports:
      - "8500:8500"
    volumes:
      - consul-data:/consul/data
    command: "agent -server -bootstrap-expect=1 -ui -client=0.0.0.0"
    networks:
      - zhuque-network

  # 消息队列
  rabbitmq:
    image: rabbitmq:3-management
    ports:
      - "5672:5672"
      - "15672:15672"
    environment:
      - RABBITMQ_DEFAULT_USER=admin
      - RABBITMQ_DEFAULT_PASS=admin123
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    networks:
      - phoenix-network

  # 缓存
  redis:
    image: redis:alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - phoenix-network

  # 数据库
  postgres:
    image: postgres:14
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_DB=deepcad
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - zhuque-network

  # 对象存储
  minio:
    image: minio/minio
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      - MINIO_ROOT_USER=admin
      - MINIO_ROOT_PASSWORD=admin123
    command: server /data --console-address ":9001"
    volumes:
      - minio_data:/data
    networks:
      - phoenix-network

  # 监控系统
  prometheus:
    image: prom/prometheus:v2.42.0
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
    networks:
      - zhuque-network

  grafana:
    image: grafana/grafana:9.4.7
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    depends_on:
      - prometheus
    networks:
      - zhuque-network

  # 日志系统
  elasticsearch:
    image: elasticsearch:7.14.0
    ports:
      - "9200:9200"
    environment:
      - discovery.type=single-node
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch_data:/usr/share/elasticsearch/data
    networks:
      - phoenix-network

  kibana:
    image: kibana:7.14.0
    ports:
      - "5601:5601"
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    depends_on:
      - elasticsearch
    networks:
      - phoenix-network

  # 链路追踪
  jaeger:
    image: jaegertracing/all-in-one:1.42
    container_name: jaeger
    ports:
      - "16686:16686"  # UI
      - "4317:4317"    # OTLP gRPC
      - "4318:4318"    # OTLP HTTP
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    networks:
      - zhuque-network

  # 几何服务
  geometry-service:
    build:
      context: ./services/geometry
      dockerfile: Dockerfile
    container_name: geometry-service
    ports:
      - "8001:8001"
    environment:
      - SERVICE_PORT=8001
      - CONSUL_HOST=consul
      - OTLP_ENDPOINT=http://jaeger:4317
    depends_on:
      - consul
      - jaeger
    volumes:
      - ./data/geometry:/app/data
    networks:
      - zhuque-network

  # 网格服务
  mesh-service:
    build:
      context: ./services/mesh
      dockerfile: Dockerfile
    container_name: mesh-service
    ports:
      - "8002:8002"
    environment:
      - SERVICE_PORT=8002
      - CONSUL_HOST=consul
      - OTLP_ENDPOINT=http://jaeger:4317
    depends_on:
      - consul
      - jaeger
      - geometry-service
    volumes:
      - ./data/mesh:/app/data
    networks:
      - zhuque-network

  # 分析服务
  analysis-service:
    build:
      context: ./services/analysis
      dockerfile: Dockerfile
    container_name: analysis-service
    ports:
      - "8003:8003"
    environment:
      - SERVICE_PORT=8003
      - CONSUL_HOST=consul
      - OTLP_ENDPOINT=http://jaeger:4317
    depends_on:
      - consul
      - jaeger
      - mesh-service
    volumes:
      - ./data/analysis:/app/data
    networks:
      - zhuque-network

  # 结果服务
  result-service:
    build:
      context: ./services/result
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    environment:
      - CONSUL_HOST=consul
      - CONSUL_PORT=8500
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - RABBITMQ_HOST=rabbitmq
      - RABBITMQ_PORT=5672
      - MINIO_HOST=minio
      - MINIO_PORT=9000
      - JAEGER_AGENT_HOST=jaeger
      - JAEGER_AGENT_PORT=6831
    depends_on:
      - consul
      - redis
      - rabbitmq
      - minio
      - jaeger
      - analysis-service
    volumes:
      - ./data/result:/app/data
    networks:
      - phoenix-network

  # 项目服务
  project-service:
    build:
      context: ./services/project
      dockerfile: Dockerfile
    container_name: project-service
    ports:
      - "8004:8004"
    environment:
      - SERVICE_PORT=8004
      - CONSUL_HOST=consul
      - OTLP_ENDPOINT=http://jaeger:4317
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/deepcad
    depends_on:
      - consul
      - jaeger
      - postgres
    volumes:
      - ./data/project:/app/data
    networks:
      - zhuque-network

  # 文件服务
  file-service:
    build:
      context: ./services/file
      dockerfile: Dockerfile
    container_name: file-service
    ports:
      - "8005:8005"
    environment:
      - SERVICE_PORT=8005
      - CONSUL_HOST=consul
      - OTLP_ENDPOINT=http://jaeger:4317
      - STORAGE_PATH=/app/storage
    volumes:
      - file-storage:/app/storage
    depends_on:
      - consul
      - jaeger
    networks:
      - zhuque-network

  # 通知服务
  notification-service:
    build:
      context: ./services/notification
      dockerfile: Dockerfile
    container_name: notification-service
    ports:
      - "8006:8006"
    environment:
      - SERVICE_PORT=8006
      - CONSUL_HOST=consul
      - OTLP_ENDPOINT=http://jaeger:4317
    depends_on:
      - consul
      - jaeger
    networks:
      - zhuque-network

  # 前端服务
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    ports:
      - "3001:3001"
    environment:
      - REACT_APP_API_BASE_URL=http://localhost/api
    depends_on:
      - nginx
    networks:
      - zhuque-network

volumes:
  rabbitmq_data:
  redis_data:
  postgres-data:
  minio_data:
  prometheus-data:
  grafana-data:
  elasticsearch_data:
  consul-data:
  file-storage:

networks:
  phoenix-network:
    driver: bridge
  zhuque-network:
    driver: bridge

# 后端应用（传统模式，用于过渡）
backend:
  build:
    context: ./backend
    dockerfile: Dockerfile
  container_name: backend
  ports:
    - "8000:8000"
  environment:
    - CONSUL_HOST=consul
    - GEOMETRY_SERVICE_URL=http://geometry-service:8001
    - MESH_SERVICE_URL=http://mesh-service:8002
    - ANALYSIS_SERVICE_URL=http://analysis-service:8003
  depends_on:
    - consul
    - geometry-service
    - mesh-service
    - analysis-service
  networks:
    - zhuque-network 